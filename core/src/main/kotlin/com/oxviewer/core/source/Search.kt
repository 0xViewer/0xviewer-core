/*
 * Copyright 2018 Hippo Seven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.oxviewer.core.source

import com.oxviewer.core.PublicAPI

/**
 * Query pattern determines how users could configure [query parameters][Parameters].
 */
@PublicAPI
class Pattern(builder: Builder) {

  val options = builder.options.toList()

  @PublicAPI
  class Builder @PublicAPI constructor() {

    val options = mutableListOf<Option>()

    /**
     * Adds a query option to this query pattern builder.
     */
    @PublicAPI
    fun add(option: Option): Builder {
      options.add(option)
      return this
    }

    fun build(): Pattern {
      // Check duplicate key
      val map = mutableMapOf<String, Option>()
      for (option in options) {
        if (map.containsKey(option.key)) {
          throw IllegalStateException("Two options with a same key: ${option.key}. " +
              "One option is ${map[option.key]}, the other option is $option.")
        }
        map[option.key] = option
      }

      return Pattern(this)
    }
  }
}

/**
 * Query parameters are generated by user with [query pattern][Pattern].
 */
@PublicAPI
class Parameters(private val values: Map<String, Any>) {

  /**
   * Returns the boolean value with the key.
   */
  @PublicAPI
  fun boolean(key: String): Boolean = values[key] as Boolean

  /**
   * Returns the string value with the key.
   */
  @PublicAPI
  fun string(key: String): String = values[key] as String
}

/**
 * Abstract options of [query pattern][Parameters].
 * Options are user-configurable. Users may assign actual values to them.
 * Each option holds a key, a name, a default value and a suggestion.
 *
 * @param key the identify of the option, duplicate key in one
 *            [query parameters][Parameters] is illegal.
 * @param name the display name of the option
 * @param suggestion the suggestion about how the option looks
 */
@PublicAPI
sealed class Option(open val key: String, open val name: String, open val suggestion: String?)

/**
 * True-or-false options.
 *
 * @see Parameters.boolean
 */
@PublicAPI
data class Switch @PublicAPI constructor(
    override val key: String,
    override val name: String,
    val default: Boolean,
    override val suggestion: String?
) : Option(key, name, suggestion)

/**
 * Custom text options.
 *
 * @see Parameters.string
 */
@PublicAPI
data class Text @PublicAPI constructor(
    override val key: String,
    override val name: String,
    val default: String,
    override val suggestion: String?
) : Option(key, name, suggestion)

// TODO more options
// TODO option group?

/*
 * Copyright 2018 Hippo Seven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ehviewer.core.source

import com.ehviewer.core.PublicAPI

/**
 * Query pattern determines how users could configure [query parameters][Parameters].
 */
@PublicAPI
class Pattern(builder: Builder) {

  val options = builder.options.toList()

  @PublicAPI
  class Builder @PublicAPI constructor() {

    val options = mutableListOf<Option>()

    /**
     * Adds a query option to this query pattern builder.
     */
    @PublicAPI
    fun add(option: Option): Builder {
      options.add(option)
      return this
    }

    fun build(): Pattern {
      // Check duplicate key
      val map = mutableMapOf<String, Option>()
      for (option in options) {
        if (map.containsKey(option.key)) {
          throw IllegalStateException("Two options with a same key: ${option.key}. " +
              "One option is ${map[option.key]}, the other option is $option.")
        }
        map[option.key] = option
      }

      return Pattern(this)
    }
  }
}

/**
 * Query parameters are generated by user with [query pattern][Parameters].
 */
@PublicAPI
class Parameters(private val values: Map<String, Any>) {

  /**
   * Returns the boolean value with the key.
   */
  @PublicAPI
  fun boolean(key: String): Boolean = values[key] as Boolean

  /**
   * Returns the string value with the key.
   */
  @PublicAPI
  fun string(key: String): String = values[key] as String
}

/**
 * An abstract option of [query pattern][Parameters].
 * Each option has a key and a default value.
 * Users may assign a actual value to it.
 */
@PublicAPI
sealed class Option(open val key: String)

/**
 * A true-or-false option.
 *
 * @see Parameters.boolean
 */
@PublicAPI
data class Switch @PublicAPI constructor(override val key: String, val default: Boolean) : Option(key)

/**
 * A custom text option.
 *
 * @see Parameters.string
 */
@PublicAPI
data class Text @PublicAPI constructor(override val key: String, val default: String) : Option(key)

// TODO more options
